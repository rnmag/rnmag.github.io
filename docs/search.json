[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Rafael N. Magalhães",
    "section": "",
    "text": "Download Resume \n\n\n  \n    \n\n    \n  \n    \n     Email\n  \n  \n    \n     LinkedIn\n  \n  \n    \n     Github\n  \n\n  \n  \nHi! Data scientist and Machine Learning Engineer trained as a quantitative social scientist. I am passionate about telling stories with data, and have a keen interest in statistical modeling and visualization.\nCurrently acting as an independent consultant, I have also accumulated experience managing data science teams. Main strengths in this role include strategic advising and facilitating communication between technical talent and decision makers.\nI am available for traveling and willing to relocate for the right opportunity."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Rafael N. Magalhães",
    "section": "",
    "text": "I’m a data scientist with experience in predictive modeling, causal inference and analytics. Here you will find information on some of my projects and material for my courses."
  },
  {
    "objectID": "notebook.html",
    "href": "notebook.html",
    "title": "Stan interfaces in R",
    "section": "",
    "text": "Stan (Stan Development Team, 2023) is a powerful and popular tool for Bayesian computation, accessible through interfaces available in most statistical computing platforms or from the command line. R (R Core Team, 2022) has a particularly well-developed ecosystem of packages for working with Stan, encompassing both packages written by the Stan Development Team and those that build upon this base architecture. However, the breadth of packages can make it difficult for even an experienced Bayesian statistician to identify how to replicate their workflow in Stan using these R packages, and how to decide between packages that appear to have a similar use case. In this note, we combine forces as a Stan user (LK) and Stan developer (JG) to walk through the ecosystem, noting how we decide which package to use in which context.\nTo fit a model with Stan, the user specifies a model in the Stan language and then selects one of several available algorithms to perform inference. The most commonly used algorithm in Stan is Hamiltonian Monte Carlo with a No U-turn Sampler, but there are also variational inference and optimization algorithms available. Users provide data and interact with Stan through an interface. In R, there are two main options for this. The first, RStan, uses Rcpp (Eddelbuettel and Franc¸ois, 2011) to compile and run Stan’s C++ code from R. The second, CmdStanR (Gabry et al., 2022), runs Stan under the hood through its command line interface (CmdStan) and then reads the results into R (with similarities to CmdStanPy for Python).\nAside from the engineering differences,1 practically, we find that there are two important operational differences. The first is the Stan version that users have access to. As updating RStan on CRAN can be complicated, it often runs an older version of Stan when compared to CmdStanR. This means that users miss out on the most recent features and bug fixes available in the latest Stan versions (e.g., improved compilation time, additional GPU support, and many others). The second is licensing and permissions. CmdStanR has a more permissive license (BSD-3 like Stan itself versus RStan’s GPL-3). Both are open source licenses, but the increased flexibility of the BSD license may be relevant if you work for a company that plans on using Stan in production. Before it can be used, CmdStanR also requires the user to download and build the CmdStan command line interface, whereas RStan can be installed entirely from CRAN. The install cmdstan() function is provided to make this convenient (performing the download from GitHub and the build with a single function call), but may impact your decision of which interface to use depending on your institutional IT regulations.\nThere are also a few smaller differences between the interfaces. RStan has a number of its own helper functions for calculating important posterior summary statistics and diagnostics, while CmdStanR instead outsources this to the newer R package posterior (Burkner et al., 2023).2 Finally, RStan makes use of R’s S4 object system while CmdStanR uses R6 (Chang, 2022), which is similar to R’s reference classes and classical object object-oriented programming. From the end user’s perspective, the main impact of this difference is just the coding style required to use the package. The latter provides a coding experience more similar to Python and is essentially identical to the CmdStanPy interface.\nBoth interfaces work by users directly coding their model in the Stan language. For bespoke models, this allows for the greatest flexibility for users. However, for many of the most common models (e.g., a logistic regression or a multilevel linear model), this may mean an average user writing similar Stan code over and over, with small variations for specific data (e.g., number of variables). As all coders know, this can make bugs more likely and can be unnecessarily time-consuming. Two R packages from the Stan Development Team assist with this problem – rstanarm (Goodrich et al., 2022) and brms (Burkner, 2017). Both take a data frame and a formula in standard R notation, run the model using Stan, and return the posterior distributions estimated by Stan without the user needing to write their own Stan code. Both packages also allow the user to make predictions for new data points similarly to the predict() function (through the posterior predict(), posterior linpred(), and posterior epred() functions) and provide other post-processing functionality.\nHowever, the practical use cases for rstanarm and brms can be quite different. rstanarm contains a number of precompiled models, which means working in rstanarm reduces the chance of encountering time-consuming installation issues or issues compiling individual models. For users new to R and large classrooms of individuals being introduced to Bayesian analysis, this is a major benefit. It includes a range of useful and common models (e.g., all GLMs, many hierarchical regression models, survival models). The priors used by rstanarm are good generic priors and can be modified to some extent, but there is limited support for fine-level modifications. For those working in a research context, more control might be needed. While it is possible to access the Stan model code corresponding to an rstanarm model and tweak it, the Stan code has been written for generality (to pre-compile many variations of similar models), efficiency, and numerical stability, and not for readability, making it difficult to directly implement your own modifications to the underlying Stan code.\nLike rstanarm, brms takes R formula notation and a data frame, but unlike rstanarm, brms produces the corresponding Stan model code in real time instead of pre-compiling it. This means that it needs to then be compiled before running. This is a disadvantage in that compilation can sometimes be slow, and the user needs a suitable C++ tool chain. However, not pre-compiling the models means that brms can offer a wider range of models than rstanarm (brms uses an extended formula notation to incorporate a wide range of models). The priors can also be modified more freely, either through the package functionality or by directly modifying the Stan code. Both packages have the nice feature of reducing post-hoc data manipulation for new data predictions, which again reduces the risk of bugs (through additional testing) and increases efficiency of coding. brms can be run with both a CmdStanR or RStan backend, while rstanarm relies on RStan.\nAfter running a model, it is vital to visualize the output and diagnose any sampling or modeling issues. Two packages designed to work with output from Stan are bayesplot (Gabry and Mahr, 2023) and shinystan (Gabry and Veen, 2022). Both assist the user with visual diagnostics in line with the recommendations in Gabry et al. (2019). shinystan uses an interactive Shiny dashboard, with options to export for paper appendices. bayesplot relies on the user calling its many plotting functions and can be built upon using standard ggplot2 (Wickham, 2016) notation. Of course, any model also requires validation. An efficient approximate form of leave-one-out crossvalidation (Vehtari et al., 2017) is implemented in the loo package (Vehtari et al., 2023) and works with all rstanarm and brms models, and also with custom Stan models run using RStan and CmdStanR more generally, provided they have been written in a particular form (more details available in the loo package documentation). Again, this is available without much manual manipulation through the use of a tested function (loo()). For variable selection, the projpred package (Piironen et al., 2022) is designed to work with rstanarm and brms models and provides methods to find the smallest subset of predictors that achieves a predictive performance close to the larger reference model.\nThe R packages mentioned so far are all developed by or in collaboration with the Stan Development Team. However, there are also many packages developed by others that provide useful functions for fitting Stan models or working with Stan output in R. A few of the most popular are tidybayes (Kay, 2023), which provides functions for working with posterior distributions using a tidy data format; bridgesampling (Gronau et al., 2020), which estimates marginal likelihoods and Bayes factors; and prophet (Taylor and Letham, 2021), which uses Stan to forecast time series with seasonal effects. Many other packages include Stan models for a wide range of applications and can be found in CRAN’s list of RStan’s reverse dependencies at https://cran.r-project.org/package=rstan. For help developing your own R package that runs Stan, the Stan Development Team also provides the rstantools package (Gabry et al., 2023) which can set up the necessary package structure for you. Together, this suite of packages creates a workflow that we feel is useful and helpful for the applied Bayesian statistician. Our hope is that this brief summary of the packages, their designed use and interactions between can help the user to navigate this environment. Of course, the original package documentation provides additional detail on specific implementations, but we felt that a wide lens overview would be helpful."
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "This is a Quarto website e agora abcdefg.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites and also esse site.\n\na &lt;- 1 + 1\n\na\n\n[1] 2\n\n\nAs the armies advanced on one another, Hannibal gradually extended the center of his line, as Polybius described: “After thus drawing up his whole army in a straight line, he took the central companies of Hispanics and Celts and advanced with them, keeping the rest of them in contact with these companies, but gradually falling off, so as to produce a crescent-shaped formation, the line of the flanking companies growing thinner as it was prolonged, his object being to employ the Africans as a reserve force and to begin the action with the Hispanics and Celts.” Polybius described the weak Carthaginian center as deployed in a crescent, curving out toward the Romans in the middle with the African troops on their flanks in echelon formation. It is believed that the purpose of this formation was to break the forward momentum of the Roman infantry, and delay its advance before other developments allowed Hannibal to deploy his African infantry most effectively. While the majority of historians feel that Hannibal’s action was deliberate, some have called this account fanciful, and claim that the actions of the day represent either the natural curvature that occurs when a broad front of infantry marches forward, or the bending back of the Carthaginian center from the shock action of meeting the heavily massed Roman center.\nThe battle began with a fierce cavalry engagement on the flanks. Polybius described many of the Hispanic and Celtic horsemen facing the Romans dismounting due to the lack of space to fight on horseback, and called the struggle “barbaric” in the sense of its utter brutality. When the Carthaginian cavalry got the upper hand, they cut down their Roman opponents without giving quarter. On the other flank the Numidians engaged in a way that merely kept the Roman allied cavalry occupied. Hasdrubal kept his victorious Hispanic and Gallic cavalry under control and did not chase the retreating Roman right wing. Instead, he led them to the other side of the field to attack the socii cavalry still fighting the Numidians. Assailed from both sides, the allied cavalry broke before Hasdrubal could charge into contact and the Numidians pursued them off the field.\nWhile the Carthaginian cavalry were in the process of defeating the Roman horsemen, the masses of infantry on both sides advanced towards each other in the center of the field. The wind from the east blew dust in the Romans’ faces and obscured their vision. While the wind was not a major factor, the dust that both armies created would have been potentially debilitating to sight. Although it made seeing difficult, troops would still have been able to see others in the vicinity. The dust, however, was not the only psychological factor involved in battle. Because of the somewhat distant battle location, both sides were forced to fight on little sleep. Another Roman disadvantage was thirst caused by Hannibal’s attack on the Roman encampment during the previous day. Furthermore, the massive number of troops would have led to an overwhelming amount of background noise. All of these psychological factors made battle especially difficult for the infantrymen.\nThe light infantry on both sides engaged in indecisive skirmishing, inflicting few casualties and quickly withdrawing through the ranks of their heavy infantry. As the Roman heavy infantry attacked, Hannibal stood with his men in the weak center and held them together in a controlled retreat. The crescent of Hispanic and Gallic troops buckled inwards as they gradually withdrew step by step. Knowing the superiority of the Roman infantry, Hannibal had instructed his infantry to withdraw deliberately, creating an even tighter semicircle around the attacking Roman forces. By doing so, he had turned the strength of the Roman infantry into a weakness. While the front ranks were gradually advancing, the bulk of the Roman troops began to lose their cohesion, as troops from the reserve lines advanced into the growing gaps. Soon they were compacted together so closely that they had little space to wield their weapons. In pressing so far forward in their desire to destroy the retreating and seemingly collapsing line of Hispanic and Gallic troops, the Romans had ignored (possibly due to the dust) the African troops that stood uncommitted on the projecting ends of this now-reversed crescent. This also gave the Carthaginian cavalry time to drive the Roman cavalry off on both flanks and attack the Roman center in the rear. The Roman infantry, now stripped of protection on both its flanks, formed a wedge that drove deeper and deeper into the Carthaginian semicircle, driving itself into an alley formed by the African infantry on the wings. At this decisive point, Hannibal ordered his African infantry to turn inwards and advance against the Roman flanks, creating an encirclement in one of the earliest known examples of a pincer movement.\nWhen the Carthaginian cavalry attacked the Romans in the rear and the African flanking echelons assailed them on their right and left, the advance of the Roman infantry was brought to an abrupt halt. The Romans were henceforth enclosed in a pocket with no means of escape. The Carthaginians created a wall and began to systematically massacre them. Polybius wrote: “as their outer ranks were continually cut down, and the survivors forced to pull back and huddle together, they were finally all killed where they stood.”\nLiterary modernism is often summed up in a line from W. B. Yeats: “Things fall apart; the centre cannot hold” (in ‘The Second Coming’).[15] Modernists often search for a metaphysical ‘centre’ but experience its collapse.[16] (Postmodernism, by way of contrast, celebrate that collapse, exposing the failure of metaphysics, for instance in Jacques Derrida’s deconstruction of metaphysical claims.)[17]\nPhilosophically, the collapse of metaphysics can be traced back to the Scottish philosopher David Hume (1711–1776), who argued that we never actually perceive one event causing another. We only experience the ‘constant conjunction’ of events, and do not perceive a metaphysical ‘cause’. Similarly, Hume argues (without using the actual terms) that we never know the self as object, only the self as subject, and we are thus blind to our true natures.[18] More generally, if we only ‘know’ through sensory experience (seeing, touching, etc.), then we cannot ‘know’ or make metaphysical claims.\nModernism is thus often driven emotionally by the desire for metaphysical truths, while understanding their impossibility. Modernist novels, for instance, feature characters like Marlow in Heart of Darkness or Nick Carraway in The Great Gatsby who believe that they have encountered some great truth about nature or character, truths that the novels themselves treat ironically, offering more mundane explanations.[19] Similarly, many poems of Wallace Stevens struggle with the sense of nature’s significance, falling under two headings: poems in which the speaker denies that nature has meaning, only for nature to loom up by the end of the poem; and poems in which the speaker claims nature has meaning, only for that meaning to collapse by the end of the poem.\nModernism often rejects nineteenth century realism, if the latter is understood as focusing on the embodiment of meaning within a naturalistic representation. At the same time, some modernists aim at a more ‘real’ realism, one that is decentred. Picasso’s proto-cubist painting, Les Demoiselles d’Avignon of 1907 (see picture above) does not present its subjects from a single point of view (that of a single viewer), but instead presents a flat, two-dimensional picture plane. ‘The Poet’ of 1911 is similarly decentred, presenting the body from every point of view. As the Peggy Guggenheim Collections website puts it, ‘Picasso presents multiple views of each object, as if he had moved around it, and synthesizes them into a single compound image’.[20]\nThis distinction between modernism and romanticism extends to their respective treatments of ‘symbol’. The romantics at times see an essential relation (the ‘ground’) between the symbol (the ‘vehicle’, in I.A. Richards’s terms)[22] and its ‘tenor’ (its meaning)—for example in Coleridge’s description of nature as ‘that eternal language which thy God / Utters’.[23] But while nature and its symbols may be God’s language, for some romantic theorists it remains inscrutable. As Goethe (not quite a romantic) said, ‘the idea [or meaning] remains eternally and infinitely active and inaccessible in the image’.[24] This was extended in modernist theory which, drawing on its Symbolist precursors, often emphasises the inscrutability and failure of symbol and metaphor—for example in Stevens who seeks and fails to find meaning in nature, even if he at times seems to sense such a meaning. As such, symbolists and modernists at times adopt a mystical approach to suggest a non-rational sense of meaning.[25]\nFor these reasons, modernist metaphors are often unnatural, as for instance in T.S. Eliot’s description of an evening ‘spread out against the sky / Like a patient etherized upon a table’.[26] Similarly, in many later modernist poets nature is unnaturalised and at times mechanised, as for example in Stephen Oliver’s image of the moon busily ‘hoisting’ itself into consciousness.[27]"
  },
  {
    "objectID": "teaching.html",
    "href": "teaching.html",
    "title": "Teaching",
    "section": "",
    "text": "Opa, This is a Quarto website e agora abcdefg.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites and also esse site.\n\na &lt;- 1 + 1\n\na\n\n[1] 2"
  }
]