[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Rafael N. Magalhães",
    "section": "",
    "text": "Download Resume \n\n\n  \n    \n\n    \n  \n    \n     Email\n  \n  \n    \n     LinkedIn\n  \n  \n    \n     Github\n  \n\n  \n  \nHi! Data scientist and Machine Learning Engineer trained as a quantitative social scientist. I am passionate about telling stories with data, and have a keen interest in statistical modeling and visualization.\nCurrently acting as an independent consultant, I have also accumulated experience managing data science teams. Main strengths in this role include strategic advising and facilitating communication between technical talent and decision makers.\nI am available for traveling and willing to relocate for the right opportunity."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Rafael N. Magalhães",
    "section": "",
    "text": "I’m a data scientist with experience in predictive modeling, causal inference and analytics. Here you will find information on some of my projects and material for my courses."
  },
  {
    "objectID": "notebook.html",
    "href": "notebook.html",
    "title": "Stan interfaces in R",
    "section": "",
    "text": "Stan (Stan Development Team, 2023) is a powerful and popular tool for Bayesian computation, accessible through interfaces available in most statistical computing platforms or from the command line. R (R Core Team, 2022) has a particularly well-developed ecosystem of packages for working with Stan, encompassing both packages written by the Stan Development Team and those that build upon this base architecture. However, the breadth of packages can make it difficult for even an experienced Bayesian statistician to identify how to replicate their workflow in Stan using these R packages, and how to decide between packages that appear to have a similar use case. In this note, we combine forces as a Stan user (LK) and Stan developer (JG) to walk through the ecosystem, noting how we decide which package to use in which context.\nTo fit a model with Stan, the user specifies a model in the Stan language and then selects one of several available algorithms to perform inference. The most commonly used algorithm in Stan is Hamiltonian Monte Carlo with a No U-turn Sampler, but there are also variational inference and optimization algorithms available. Users provide data and interact with Stan through an interface. In R, there are two main options for this. The first, RStan, uses Rcpp (Eddelbuettel and Franc¸ois, 2011) to compile and run Stan’s C++ code from R. The second, CmdStanR (Gabry et al., 2022), runs Stan under the hood through its command line interface (CmdStan) and then reads the results into R (with similarities to CmdStanPy for Python).\nAside from the engineering differences,1 practically, we find that there are two important operational differences. The first is the Stan version that users have access to. As updating RStan on CRAN can be complicated, it often runs an older version of Stan when compared to CmdStanR. This means that users miss out on the most recent features and bug fixes available in the latest Stan versions (e.g., improved compilation time, additional GPU support, and many others). The second is licensing and permissions. CmdStanR has a more permissive license (BSD-3 like Stan itself versus RStan’s GPL-3). Both are open source licenses, but the increased flexibility of the BSD license may be relevant if you work for a company that plans on using Stan in production. Before it can be used, CmdStanR also requires the user to download and build the CmdStan command line interface, whereas RStan can be installed entirely from CRAN. The install cmdstan() function is provided to make this convenient (performing the download from GitHub and the build with a single function call), but may impact your decision of which interface to use depending on your institutional IT regulations.\nThere are also a few smaller differences between the interfaces. RStan has a number of its own helper functions for calculating important posterior summary statistics and diagnostics, while CmdStanR instead outsources this to the newer R package posterior (Burkner et al., 2023).2 Finally, RStan makes use of R’s S4 object system while CmdStanR uses R6 (Chang, 2022), which is similar to R’s reference classes and classical object object-oriented programming. From the end user’s perspective, the main impact of this difference is just the coding style required to use the package. The latter provides a coding experience more similar to Python and is essentially identical to the CmdStanPy interface.\nBoth interfaces work by users directly coding their model in the Stan language. For bespoke models, this allows for the greatest flexibility for users. However, for many of the most common models (e.g., a logistic regression or a multilevel linear model), this may mean an average user writing similar Stan code over and over, with small variations for specific data (e.g., number of variables). As all coders know, this can make bugs more likely and can be unnecessarily time-consuming. Two R packages from the Stan Development Team assist with this problem – rstanarm (Goodrich et al., 2022) and brms (Burkner, 2017). Both take a data frame and a formula in standard R notation, run the model using Stan, and return the posterior distributions estimated by Stan without the user needing to write their own Stan code. Both packages also allow the user to make predictions for new data points similarly to the predict() function (through the posterior predict(), posterior linpred(), and posterior epred() functions) and provide other post-processing functionality.\nHowever, the practical use cases for rstanarm and brms can be quite different. rstanarm contains a number of precompiled models, which means working in rstanarm reduces the chance of encountering time-consuming installation issues or issues compiling individual models. For users new to R and large classrooms of individuals being introduced to Bayesian analysis, this is a major benefit. It includes a range of useful and common models (e.g., all GLMs, many hierarchical regression models, survival models). The priors used by rstanarm are good generic priors and can be modified to some extent, but there is limited support for fine-level modifications. For those working in a research context, more control might be needed. While it is possible to access the Stan model code corresponding to an rstanarm model and tweak it, the Stan code has been written for generality (to pre-compile many variations of similar models), efficiency, and numerical stability, and not for readability, making it difficult to directly implement your own modifications to the underlying Stan code.\nLike rstanarm, brms takes R formula notation and a data frame, but unlike rstanarm, brms produces the corresponding Stan model code in real time instead of pre-compiling it. This means that it needs to then be compiled before running. This is a disadvantage in that compilation can sometimes be slow, and the user needs a suitable C++ tool chain. However, not pre-compiling the models means that brms can offer a wider range of models than rstanarm (brms uses an extended formula notation to incorporate a wide range of models). The priors can also be modified more freely, either through the package functionality or by directly modifying the Stan code. Both packages have the nice feature of reducing post-hoc data manipulation for new data predictions, which again reduces the risk of bugs (through additional testing) and increases efficiency of coding. brms can be run with both a CmdStanR or RStan backend, while rstanarm relies on RStan.\nAfter running a model, it is vital to visualize the output and diagnose any sampling or modeling issues. Two packages designed to work with output from Stan are bayesplot (Gabry and Mahr, 2023) and shinystan (Gabry and Veen, 2022). Both assist the user with visual diagnostics in line with the recommendations in Gabry et al. (2019). shinystan uses an interactive Shiny dashboard, with options to export for paper appendices. bayesplot relies on the user calling its many plotting functions and can be built upon using standard ggplot2 (Wickham, 2016) notation. Of course, any model also requires validation. An efficient approximate form of leave-one-out crossvalidation (Vehtari et al., 2017) is implemented in the loo package (Vehtari et al., 2023) and works with all rstanarm and brms models, and also with custom Stan models run using RStan and CmdStanR more generally, provided they have been written in a particular form (more details available in the loo package documentation). Again, this is available without much manual manipulation through the use of a tested function (loo()). For variable selection, the projpred package (Piironen et al., 2022) is designed to work with rstanarm and brms models and provides methods to find the smallest subset of predictors that achieves a predictive performance close to the larger reference model.\nThe R packages mentioned so far are all developed by or in collaboration with the Stan Development Team. However, there are also many packages developed by others that provide useful functions for fitting Stan models or working with Stan output in R. A few of the most popular are tidybayes (Kay, 2023), which provides functions for working with posterior distributions using a tidy data format; bridgesampling (Gronau et al., 2020), which estimates marginal likelihoods and Bayes factors; and prophet (Taylor and Letham, 2021), which uses Stan to forecast time series with seasonal effects. Many other packages include Stan models for a wide range of applications and can be found in CRAN’s list of RStan’s reverse dependencies at https://cran.r-project.org/package=rstan. For help developing your own R package that runs Stan, the Stan Development Team also provides the rstantools package (Gabry et al., 2023) which can set up the necessary package structure for you. Together, this suite of packages creates a workflow that we feel is useful and helpful for the applied Bayesian statistician. Our hope is that this brief summary of the packages, their designed use and interactions between can help the user to navigate this environment. Of course, the original package documentation provides additional detail on specific implementations, but we felt that a wide lens overview would be helpful."
  },
  {
    "objectID": "teaching.html",
    "href": "teaching.html",
    "title": "Teaching",
    "section": "",
    "text": "Opa, This is a Quarto website e agora abcdefg.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites and also esse site.\n\na &lt;- 1 + 1\n\na\n\n[1] 2"
  }
]